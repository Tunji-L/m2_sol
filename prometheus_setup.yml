# codewizaedly.com

# Prometheus ports
# 22: SSH into server
# 9090: prometheus port (hostname:9090)
# 9100: prometheus node exporter metric logs port (hostname:9100)
# 9093: alert manager port (hoatname:9093)

# --------Install Prometheus ---------
# It is recommended to create a different user than root to run specific services. 
# This will help to isolate Prometheus and add protection to the system.

# step 1 (add user)
sudo useradd --no-create-home prometheus
sudo mkdir /etc/prometheus
sudo mkdir /var/lib/prometheus

# step 2 (install prometheus and setup the directory)
wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz
tar xvfz prometheus-2.19.0.linux-amd64.tar.gz

sudo cp prometheus-2.19.0.linux-amd64/prometheus /usr/local/bin
sudo cp prometheus-2.19.0.linux-amd64/promtool /usr/local/bin/
sudo cp -r prometheus-2.19.0.linux-amd64/consoles /etc/prometheus
sudo cp -r prometheus-2.19.0.linux-amd64/console_libraries /etc/prometheus

sudo cp prometheus-2.19.0.linux-amd64/promtool /usr/local/bin/
rm -rf prometheus-2.19.0.linux-amd64.tar.gz prometheus-2.19.0.linux-amd64

# Initially and as a proof of concept we can configure Prometheus to monitor itself. 
# All what we need to do is create or replace the content of "/etc/prometheus/prometheus.yml"
global:
  scrape_interval: 15s
  external_labels:
    monitor: 'prometheus'

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

# We might want Prometheus to be available as a service. Every time we reboot the system Prometheus
# will start with the OS Create "/etc/systemd/system/prometheus.service" and add to it the following content:

[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target

# Let’s change the permissions of the directories, files and binaries we just added to our system.
sudo chown prometheus:prometheus /etc/prometheus
sudo chown prometheus:prometheus /usr/local/bin/prometheus
sudo chown prometheus:prometheus /usr/local/bin/promtool
sudo chown -R prometheus:prometheus /etc/prometheus/consoles
sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
sudo chown -R prometheus:prometheus /var/lib/prometheus

# Now we need to configure systemd.
sudo systemctl daemon-reload
sudo systemctl enable prometheus

# Good job, now we have everything in place but the setup is not complete, 
# we need metrics to feed our brand new Prometheus instance. In the next section 
# we will learn how to setup a node exporter in a second AWS EC2 instance.


# -------------- Prometheus Node Exporter --------------------
# https://prometheus.io/docs/instrumenting/exporters/

# There are many exporters and integrations available for Prometheus. As mentioned above, 
# in this example we are going to install Prometheus Node Exporter in an AWS EC2 instance.

# Now let’s create a user for Prometheus Node Exporter
sudo useradd --no-create-home node_exporter

# We are ready to install Node Exporter binaries.
wget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
tar xzf node_exporter-1.0.1.linux-amd64.tar.gz
sudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin/node_exporter
rm -rf node_exporter-1.0.1.linux-amd64.tar.gz node_exporter-1.0.1.linux-amd64

# Configure a service. Create "/etc/systemd/system/node-exporter.service" if it doesn’t exist.
[Unit]
Description=Prometheus Node Exporter Service
After=network.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter

[Install]
WantedBy=multi-user.target

# Configure systemd.
sudo systemctl daemon-reload
sudo systemctl enable node-exporter
sudo systemctl start node-exporter
sudo systemctl status node-exporter

# Configure Prometheus Server
# Start a session in the Prometheus host virtual machine
ssh -i prometheus.pem ubuntu@ec2-3-17-28.53.us-east-2.compute.amazonaws.com

# Edit "/etc/prometheus/prometheus.yml" file.
global:
  scrape_interval: 15s
  external_labels:
    monitor: 'prometheus'

scrape_configs:

  - job_name: 'node_exporter'

    static_configs:

      - targets: ['ec2-13-58-127-241.us-east-2.compute.amazonaws.com:9100']

# Restart Prometheus service.
sudo systemctl restart prometheus

# Now in your browser navigate to http://ec2-3-17-28.53.us-east-2.compute.amazonaws.com:9090/targets


# ------------ Configure Prometheus to discover EC2 instances automatically ---------

# Create an IAM User with programmatic access and ec2ReadOnly access
# Configure Prometheus Service Discovery
# Now we need to go back to Prometheus and change the configuration again. 
ssh -i prometheus.pem ubuntu@ec2-3-17-28.53.us-east-2.compute.amazonaws.com

# Edit "/etc/prometheus/prometheus.yml" file. Notice the "region" property, this could be different in your setup.
global:
  scrape_interval: 1s
  evaluation_interval: 1s

scrape_configs:
  - job_name: 'node'
    ec2_sd_configs:
      - region: us-east-1
        access_key: PUT_THE_ACCESS_KEY_HERE
        secret_key: PUT_THE_SECRET_KEY_HERE
        port: 9100

# Restart Prometheus service.
sudo systemctl restart prometheus

# Let’s see if Prometheus is finding our Node-Exporter instance. 
# Go to http://ec2-3-17-28.53.us-east-2.compute.amazonaws.com:9090/targets.

# ----------- Setup Alert manager -----------------
# Install Alertmanager
# Login in the Prometheus instance. Don’t forget to replace this line with your configuration.
ssh -i prometheus.pem ubuntu@ec2-3-17-28.53.us-east-2.compute.amazonaws.com

# Install Alertmanager and clean up the download
wget https://github.com/prometheus/alertmanager/releases/download/v0.21.0/alertmanager-0.21.0.linux-amd64.tar.gz
tar xvfz alertmanager-0.21.0.linux-amd64.tar.gz

sudo cp alertmanager-0.21.0.linux-amd64/alertmanager /usr/local/bin
sudo cp alertmanager-0.21.0.linux-amd64/amtool /usr/local/bin/
sudo mkdir /var/lib/alertmanager

rm -rf alertmanager*

# Add Alertmanager’s configuration "/etc/prometheus/alertmanager.yml"

route:
  group_by: [Alertname]
  receiver: email-me

receivers:
- name: email-me
  email_configs:
  - to: EMAIL_YO_WANT_TO_SEND_EMAILS_TO
    from: YOUR_EMAIL_ADDRESS
    smarthost: smtp.gmail.com:587
    auth_username: YOUR_EMAIL_ADDRESS
    auth_identity: YOUR_EMAIL_ADDRESS
    auth_password: YOUR_EMAIL_PASSWORD
    # you can generate app password in place of your password
    # Go to your account: https://myaccount.google.com
    # security > Select the Signing in to Google panel select App Passwords.
    ### For this step it is also required the following:
      ## 2fa Verification is set up for your account.
      ## 2fa Verification is not set up for security keys only.
      ## Your account is not through work, school, or other organization.
      ## You’ve not turned on Advanced Protection for your account.
    # > app password > Create a new App password. > mail > other(custom name) > generate

# Getting alart on slack channel: put in the alartmanager.yml
global: 
  resolve_timeout: 1m
  slack_api_url: 'https://hooks.slack.com/services/.....'

route:
  receiver: 'slack-notification'

receivers:
  - name: 'slack-notification'
    slack_configs:
    - channel: '#monitoring-instances'
      send_resolved: true



# Configure Alertmanager as a service.
# "/etc/systemd/system/alertmanager.service"

[Unit]
Description=Alert Manager
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=prometheus
Group=prometheus
ExecStart=/usr/local/bin/alertmanager \
  --config.file=/etc/prometheus/alertmanager.yml \
  --storage.path=/var/lib/alertmanager

Restart=always

[Install]
WantedBy=multi-user.target

# Configure Systemd
sudo systemctl daemon-reload
sudo systemctl enable alertmanager
sudo systemctl start alertmanager

# Create a Rule
# This is just a simple alert rule. In a nutshell it alerts when an instance has been down 
# for more than 3 minutes. Add this file at "/etc/prometheus/rules.yml"

groups:
- name: Down
  rules:
  - alert: InstanceDown
    expr: up == 0
    for: 3m
    labels:
      severity: 'critical'
    annotations:
      summary: "Instance  is down"
      description: " of job  has been down for more than 3 minutes."

# Configure Prometheus
# Let’s change the permissions of the directories, files and binaries we just added to our system.
sudo chown -R prometheus:prometheus /etc/prometheus

# Update Prometheus configuration file. Edit "/etc/prometheus/prometheus.yml"
global:
  scrape_interval: 1s
  evaluation_interval: 1s

rule_files:
 - /etc/prometheus/rules.yml

alerting:
  alertmanagers:
  - static_configs:
    - targets:
      - localhost:9093

scrape_configs:
  - job_name: 'node'
    ec2_sd_configs:
      - region: us-east-1
        access_key: PUT_THE_ACCESS_KEY_HERE
        secret_key: PUT_THE_SECRET_KEY_HERE
        port: 9100

# Reload Systemd
sudo systemctl restart prometheus